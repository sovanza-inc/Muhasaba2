'use client'

import { useState } from 'react'
import React from 'react'

import {
  Card,
  CardBody,
  Box,
  Heading,
  Text,
  SimpleGrid,
  HStack,
  Progress,
  Button,
  Icon,
  Spinner,
  Select,
} from '@chakra-ui/react'
import {
  Page,
  PageBody,
  PageHeader,
} from '@saas-ui-pro/react'
import { LuChevronRight } from 'react-icons/lu'

import { AreaChart, BarChart } from '@saas-ui/charts'
import { useCurrentWorkspace } from '#features/common/hooks/use-current-workspace'
import { usePath } from '#features/common/hooks/use-path'
import { useApiCache } from '#features/common/hooks/use-api-cache'
import { useSearchParams } from 'next/navigation'
import { api } from '#lib/trpc/react'
import { FinancialKPIs } from './metrics/financial-kpis'

interface ConnectedBank {
  id: string;
  customer_id: string;
  bank_identifier: string;
  permissions: {
    identity: boolean;
    accounts: boolean;
    balance: boolean;
    transactions: boolean;
  };
  bank_type: string;
  created_at: string;
}

interface BankAccount {
  account_id: string;
  status: string;
  currency: string;
  account_type?: string;
  account_sub_type?: string;
  nickname?: string;
  bank_id?: string;
}

interface BankTransaction {
  transaction_id: string;
  account_id: string;
  transaction_information: string;
  transaction_reference: string | null;
  amount: {
    amount: number;
    currency: string;
  };
  credit_debit_indicator: string;
  status: string;
  booking_date_time: string;
  value_date_time: string;
  bank_name?: string;
  bank_id?: string;
  account_type?: string;
  account_name?: string;
}

export function DashboardPage() {
  const searchParams = useSearchParams()
  const handleSubscriptionSuccess = api.billing.handleSubscriptionSuccess.useMutation()
  const [workspace] = useCurrentWorkspace()

  // Handle subscription success
  React.useEffect(() => {
    const success = searchParams.get('success')
    const handled = searchParams.get('handled')
    
    if (success === 'true' && !handled && workspace?.id && !handleSubscriptionSuccess.isPending) {
      console.log('Updating subscription for workspace:', workspace.id)
      handleSubscriptionSuccess.mutate(
        { workspaceId: workspace.id },
        {
          onSuccess: () => {
            console.log('Subscription updated successfully')
            // Update URL to prevent multiple calls
            const url = new URL(window.location.href)
            url.searchParams.set('handled', 'true')
            window.history.replaceState({}, '', url.toString())
          },
          onError: (error) => {
            console.error('Failed to update subscription:', error)
          }
        }
      )
    }
  }, [searchParams, workspace?.id, handleSubscriptionSuccess])

  const [isLoading, setIsLoading] = useState(true)
  const [transactions, setTransactions] = useState<BankTransaction[]>([])
  const [authToken, setAuthToken] = useState<string | null>(null)
  const [customerId, setCustomerId] = useState<string | null>(null)
  const [connectedBanks, setConnectedBanks] = useState<ConnectedBank[]>([])
  const [accounts, setAccounts] = useState<BankAccount[]>([])
  const [selectedBankId, setSelectedBankId] = useState<string>('all')
  const { CACHE_KEYS, prefetchData } = useApiCache() 